# Show message and exit with code 169
function die(){
    if [[ $# -gt 0 ]]; then
        echo "$@"
    fi
    builtin exit 169
}

# Colorful man page
function man() {
    # md/bold: start bold
    # me/sgr0: turn off bold, blink, underline
    # so/smso: start standout (reverse video)
    # se/rmso: stop standout
    # us/smul: start underline
    # ue/rmul: stop underline
    LESS_TERMCAP_md=$'\e[01;31m' \
        LESS_TERMCAP_me=$'\e[00;00m' \
        LESS_TERMCAP_so=$'\e[01;44;33m' \
        LESS_TERMCAP_se=$'\e[00;00;00m' \
        LESS_TERMCAP_us=$'\e[01;32m' \
        LESS_TERMCAP_ue=$'\e[00;00m' \
        command man "$@"
}

# Show neovim help for $1
function vh() {
    nvim -R -c ':h '$@'' -c ':wincmd j' -c ':wincmd c'
}

# Display the 256 color palette
function colourpalette() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n"
    done
}

# Go to nearest git repository root above current directory.
function cg(){
    local _cur
    _cur=$(pwd)
    while [[ $(pwd) != '/' ]]; do
        [[ -d ./.git ]] && _cur=$(pwd) && break
        cd ..
    done
    echo $_cur
    cd $_cur
}

# Get git commit count for revision $1, default revision is HEAD
function gcnt(){
    local _revision _count
    _revision=${1:-HEAD}
    if git status >/dev/null 2>&1; then
        if _count=$(git rev-list --count "$_revision" 2>/dev/null); then
            if [[ $_count -le 1 ]]; then
                echo "Revision <$_revision>: $_count commit"
            else
                echo "Revision <$_revision>: $_count commits"
            fi
        else
            echo "Revision <$_revision>: not exist"
            return 2
        fi
    else
        echo "Not under a git repository"
        return 1
    fi
}

function sudo() {
    if [[ $1 != '-i' ]]; then
        command sudo -E "$@"
    else
        command sudo -i
    fi
}

function vimcmake() {
    local _cmakelists
    _cmakelists=CMakeLists.txt
    if [[ -e $_cmakelists ]]; then
        $_vim_exexutable $_cmakelists
    else
        cp ~/.config/templates/_$_cmakelists $_cmakelists \
            && $_vim_exexutable $_cmakelists +'call AppendSignature()'
    fi
}

function vimake() {
    local _makefile
    _makefile=Makefile
    if [[ -e $_makefile ]]; then
        $_vim_exexutable $_makefile
    else
        cp ~/.config/templates/_$_makefile $_makefile \
            && $_vim_exexutable $_makefile +'call AppendSignature()'
    fi
}

function cinit() {
    if [[ -z $_conda_root ]]; then
        echo "Anaconda cannot be found under ~/anaconda3, nor /opt/anaconda" \
            >&2
        return 1
    fi
    if __conda_setup=$( \
            ''$_conda_root'/bin/conda' 'shell.zsh' 'hook' 2> /dev/null \
        ); then
        eval "$__conda_setup"
    else
        if [ -f "$_conda_root/etc/profile.d/conda.sh" ]; then
            . "$_conda_root/etc/profile.d/conda.sh"
        else
            export PATH="$_conda_root/bin:$PATH"
        fi
    fi
    unset __conda_setup
    set +e
}

function ccreate() {
    if [[ -z $_conda_root ]]; then
        echo "Anaconda cannot be found under ~/anaconda3, nor /opt/anaconda" \
            >&2
        return 1
    fi
    cinit
    conda create "$@"
}

function cact() {
    if [[ -z $_conda_root ]]; then
        echo "Anaconda cannot be found under ~/anaconda3, nor /opt/anaconda" \
            >&2
        return 1
    fi
    if [[ -n $CONDA_DEFAULT_ENV ]]; then
        echo "\`$CONDA_DEFAULT_ENV' is activated at the time, use" \
            "\`cdeact\` to deactivate first." >&2
        return 2
    fi
    if [[ $# -eq 0 ]]; then
        local _curgdir
        _curgdir=$(cg)
        _curgdir=${_curgdir##*/}
        if grep -q "\b$_curgdir\b" <(clist); then
            cinit
            conda activate $_curgdir
        else
            echo "Current directory '$_curgdir' is not known as a conda" \
                "environment, use \`$0 \$ENVNAME\` to activate an" \
                "environment with name \$ENVNAME." >&2
            return 3
        fi
    else
        cinit
        conda activate $1
    fi
}

function cdeact() {
    if [[ -z $_conda_root ]]; then
        echo "Anaconda cannot be found under ~/anaconda3, nor /opt/anaconda" \
            >&2
        return 1
    fi
    cinit
    conda deactivate $1
    unset CONDA_EXE CONDA_INTERNAL_OLDPATH CONDA_PYTHON_EXE CONDA_SHLVL
}

function crm() {
    if [[ -z $_conda_root ]]; then
        echo "Anaconda cannot be found under ~/anaconda3, nor /opt/anaconda" \
            >&2
        return 1
    fi
    if [[ $# -eq 0 ]]; then
        echo "Function \`$0\` takes 1 positional argument <env>," \
            "which is not provided" >&2
        return 2
    fi
    cinit
    conda env remove --name $1
}

function clist() {
    if [[ -z $_conda_root ]]; then
        echo "Anaconda cannot be found under ~/anaconda3, nor /opt/anaconda" \
            >&2
        return 1
    fi
    _conda_envs_dir=~/.conda/envs
    if [[ ! -d $_conda_envs_dir ]] || [[ -z $(command ls $_conda_envs_dir) ]];
    then
        echo "No envs found" >&2
    fi
    for _conda_env in $(command ls $_conda_envs_dir); do
        if [[ ${CONDA_PREFIX##*/} == $_conda_env ]]; then
            _env_enabled='->'
        else
            _env_enabled='  '
        fi
        echo " $_env_enabled $_conda_env"
    done
    unset _conda_envs_dir _conda_env _env_enabled
}

# Syntax highlighting
# vim: set filetype=sh:

# Author: Blurgy
# Date:   Jul 24 2020
