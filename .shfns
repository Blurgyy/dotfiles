# Rename files with name `xxx/yy.z` to `xxx/yy.z~`
function bak() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 <paths>" >&2
        builtin return 1
    fi
    local _path _newpath
    for _path in "$@"; do
        if [[ ! -e $_path ]]; then
            echo "'$_path' does not exist" >&2
            builtin return 2
        fi
        # Remove trailing slashes
        _path=$(sed 's:/\+$::' <<< $_path)
        _newpath=$_path~
        if [[ ! -e $_path~ ]]; then
            mv -v $_path $_newpath
        else
            echo "Not overwriting existing '$_newpath'" >&2
            builtin return 3
        fi
    done
}

# Rename files with name `xxx/yy.z!` to `xxx/yy.z`
function debak() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 <paths>" >&2
        builtin return 1
    fi
    local _path _newpath
    for _path in "$@"; do
        if ! [[ -e $_path ]]; then
            >&2 echo "'$_path' does not exist"
            builtin return 2
        fi
        # Remove trailing slashes
        _path=$(sed 's:/\+$::' <<< $_path)
        if ! grep -q '~$' <<< $_path ;then
            >&2 echo "Cannot debak file '$_path', because it does not have" \
                "'~' as its suffix"
            builtin return 4
        fi
        # Remove 1 trailing tilde from path as new path
        _newpath=$(sed 's:~$::' <<< $_path)
        if [[ ! -e $_newpath ]]; then
            mv -v $_path $_newpath
        else
            >&2 echo "Not overwriting existing '$_newpath'"
            builtin return 3
        fi
    done
}

# Show message and exit with code 169
function die(){
    if [[ $# -gt 0 ]]; then
        echo "$@"
    fi
    builtin exit 169
}

# Colorful man page
function man() {
    # md/bold: start bold
    # me/sgr0: turn off bold, blink, underline
    # so/smso: start standout (reverse video)
    # se/rmso: stop standout
    # us/smul: start underline
    # ue/rmul: stop underline
    LESS_TERMCAP_md=$'\e[01;31m' \
        LESS_TERMCAP_me=$'\e[00;00m' \
        LESS_TERMCAP_so=$'\e[01;44;33m' \
        LESS_TERMCAP_se=$'\e[00;00;00m' \
        LESS_TERMCAP_us=$'\e[01;32m' \
        LESS_TERMCAP_ue=$'\e[00;00m' \
        command man "$@"
}

# Show neovim help for $1
function vh() {
    nvim -R -c ':h '$@'' -c ':wincmd j' -c ':wincmd c'
}

# Display the 256 color palette
function colourpalette() {
    for i in {0..255}; do
        printf "\x1b[38;5;${i}mcolour${i}\x1b[0m\n"
    done
}

# Go to nearest git repository root above current directory.
function cg(){
    local _cur
    _cur=$(pwd)
    while [[ $(pwd) != '/' ]]; do
        [[ -d ./.git ]] && _cur=$(pwd) && break
        cd ..
    done
    echo $_cur
    cd $_cur
}

# Get git commit count for revision $1, default revision is HEAD
function gcnt(){
    local _revision _count
    _revision=${1:-HEAD}
    if git status >/dev/null 2>&1; then
        if _count=$(git rev-list --count "$_revision" 2>/dev/null); then
            if [[ $_count -le 1 ]]; then
                echo "Revision <$_revision>: $_count commit"
            else
                echo "Revision <$_revision>: $_count commits"
            fi
        else
            echo "Revision <$_revision>: not exist"
            builtin return 2
        fi
    else
        echo "Not under a git repository"
        builtin return 1
    fi
}

function vimcmake() {
    local _cmakelists
    _cmakelists=CMakeLists.txt
    if [[ -e $_cmakelists ]]; then
        $_vim_exexutable $_cmakelists
    else
        cp ~/.config/templates/_$_cmakelists $_cmakelists \
            && $_vim_exexutable $_cmakelists +'call AppendSignature()'
    fi
}

function vimake() {
    local _makefile
    _makefile=Makefile
    if [[ -e $_makefile ]]; then
        $_vim_exexutable $_makefile
    else
        cp ~/.config/templates/_$_makefile $_makefile \
            && $_vim_exexutable $_makefile +'call AppendSignature()'
    fi
}

# Generate a random 256-bit color in #rrggbb format
function randcolor() {
    RANDOM=$(date +%s)
    local ret randnumber
    ret='#'
    for _ in {1..3}; do
        randnumber=$RANDOM
        ret+=$(printf "%02x" $(( randnumber % 0xff )))
    done
    echo $ret
}

# Clear current line in terminal.
function ___clear_console() {
    echo -ne $'\33[2K'"\r"
}

# Timer,
function cdtimer() {
    if [[ "$#" -eq 0 ]]; then
        >&2 echo "$0: Approximate count down timer."
        >&2 echo
        >&2 echo "    Usage: $0 <SECONDS>"
        builtin return 1
    fi

    local _countdown=$1 _
    if [[ $_countdown -le 0 ]]; then
        >&2 echo "Expected positive input (got $_countdown, which is less" \
            "than or equal to 0)"
        builtin return 2
    fi
    # while [[ $_countdown -gt 0 ]]; do
    for __ in {$_countdown..1}; do
        ___clear_console && echo -ne " -> Counting down: $__ .. "
        sleep 1
    done
    ___clear_console && echo "Finished counting down $_countdown (s)"
}

# Random decision maker.
function yesno() {
    local _yes=$(( RANDOM % 2 ))
    RANDOM=$RANDOM
    tput smso
    if [[ _yes -eq 1 ]]; then
        tput setaf 2
        echo yes
    else
        tput setaf 1
        echo no
    fi
    tput rmso
}

function rfborder(){
    if ! command -v bspc >/dev/null; then
        >&2 echo "bspc is not executable"
        builtin return 1
    fi
    local _ncolor=$(randcolor)
    echo "Using randomly selected color $_ncolor for window border .."
    bspc config focused_border_color "$_ncolor"
}

# Syntax highlighting
# vim: set filetype=sh:

# Author: Blurgy
# Date:   Jul 24 2020
